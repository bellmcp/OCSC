{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ninew/Documents/GitHub/OCSC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ninew/Documents/GitHub/OCSC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";export default function post(_x,_x2){return _post.apply(this,arguments);}function _post(){_post=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(something,uid){var url,getCookie,token,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:getCookie=function _getCookie(name){var nameEQ=name+'=';var ca=document.cookie.split(';');for(var i=0;i<ca.length;i++){var c=ca[i];while(c.charAt(0)===' '){c=c.substring(1,c.length);}if(c.indexOf(nameEQ)===0)return c.substring(nameEQ.length,c.length);}return null;};url=\"\".concat(process.env.PUBLIC_URL)+'/api/tokens/'+uid;token=getCookie('token');_context.prev=3;_context.next=6;return fetch(url,{method:'POST',headers:{'Content-Type':'application/json',Authorization:'Bearer '+token},body:JSON.stringify(something)});case 6:response=_context.sent;if(!response.ok){_context.next=11;break;}_context.next=10;return response.json();case 10:return _context.abrupt(\"return\",_context.sent);case 11:if(!(response.status<=501)){_context.next=13;break;}return _context.abrupt(\"return\",response.status);case 13:_context.next=26;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](3);if(!_context.t0.response){_context.next=21;break;}return _context.abrupt(\"return\",_context.t0.response.status);case 21:if(!_context.t0.request){_context.next=25;break;}return _context.abrupt(\"return\",_context.t0.request);case 25:return _context.abrupt(\"return\",999);case 26:case\"end\":return _context.stop();}}},_callee,null,[[3,15]]);}));return _post.apply(this,arguments);}","map":{"version":3,"sources":["/Users/ninew/Documents/GitHub/OCSC/src/service/postlogin.js"],"names":["post","something","uid","getCookie","name","nameEQ","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","url","process","env","PUBLIC_URL","token","fetch","method","headers","Authorization","body","JSON","stringify","response","ok","json","status","request"],"mappings":"+SAAA,uBAA8BA,CAAAA,IAA9B,6C,+EAAe,iBAAoBC,SAApB,CAA+BC,GAA/B,UAEJC,SAFI,gIAEJA,SAFI,qBAEMC,IAFN,CAEY,CACvB,GAAIC,CAAAA,MAAM,CAAGD,IAAI,CAAG,GAApB,CACA,GAAIE,CAAAA,EAAE,CAAGC,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsB,GAAtB,CAAT,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,EAAE,CAACK,MAAvB,CAA+BD,CAAC,EAAhC,CAAoC,CAClC,GAAIE,CAAAA,CAAC,CAAGN,EAAE,CAACI,CAAD,CAAV,CACA,MAAOE,CAAC,CAACC,MAAF,CAAS,CAAT,IAAgB,GAAvB,EAA4BD,CAAC,CAAGA,CAAC,CAACE,SAAF,CAAY,CAAZ,CAAeF,CAAC,CAACD,MAAjB,CAAJ,CAA5B,CACA,GAAIC,CAAC,CAACG,OAAF,CAAUV,MAAV,IAAsB,CAA1B,CAA6B,MAAOO,CAAAA,CAAC,CAACE,SAAF,CAAYT,MAAM,CAACM,MAAnB,CAA2BC,CAAC,CAACD,MAA7B,CAAP,CAC9B,CACD,MAAO,KAAP,CACD,CAXY,CACPK,GADO,CACD,UAAGC,OAAO,CAACC,GAAR,CAAYC,UAAf,EAA8B,cAA9B,CAA+CjB,GAD9C,CAaPkB,KAbO,CAaCjB,SAAS,CAAC,OAAD,CAbV,uCAeYkB,CAAAA,KAAK,CAACL,GAAD,CAAM,CAChCM,MAAM,CAAE,MADwB,CAEhCC,OAAO,CAAE,CACP,eAAgB,kBADT,CAEPC,aAAa,CAAE,UAAYJ,KAFpB,CAFuB,CAOhCK,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe1B,SAAf,CAP0B,CAAN,CAfjB,QAeL2B,QAfK,mBAyBPA,QAAQ,CAACC,EAzBF,iDA0BID,CAAAA,QAAQ,CAACE,IAAT,EA1BJ,qEA4BPF,QAAQ,CAACG,MAAT,EAAmB,GA5BZ,2DA6BFH,QAAQ,CAACG,MA7BP,+FAgCP,YAAMH,QAhCC,0DAiCF,YAAMA,QAAN,CAAeG,MAjCb,cAkCA,YAAMC,OAlCN,0DAmCF,YAAMA,OAnCJ,0CAqCF,GArCE,uE","sourcesContent":["export default async function post(something, uid) {\n  const url = `${process.env.PUBLIC_URL}` + '/api/tokens/' + uid\n  function getCookie(name) {\n    var nameEQ = name + '='\n    var ca = document.cookie.split(';')\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i]\n      while (c.charAt(0) === ' ') c = c.substring(1, c.length)\n      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length)\n    }\n    return null\n  }\n\n  const token = getCookie('token')\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token,\n      },\n\n      body: JSON.stringify(something),\n    })\n\n    if (response.ok) {\n      return await response.json()\n    }\n    if (response.status <= 501) {\n      return response.status\n    }\n  } catch (error) {\n    if (error.response) {\n      return error.response.status\n    } else if (error.request) {\n      return error.request\n    } else {\n      return 999\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}