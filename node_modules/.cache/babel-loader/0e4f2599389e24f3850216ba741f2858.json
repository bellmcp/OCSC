{"ast":null,"code":"import _regeneratorRuntime from\"/Users/apple/Documents/GitHub/OCSCE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/apple/Documents/GitHub/OCSCE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";export default function post(_x){return _post.apply(this,arguments);}function _post(){_post=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(something){var getCookie,uid,url,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:getCookie=function _getCookie(name){var nameEQ=name+\"=\";var ca=document.cookie.split(\";\");for(var i=0;i<ca.length;i++){var c=ca[i];while(c.charAt(0)===\" \"){c=c.substring(1,c.length);}if(c.indexOf(nameEQ)===0)return c.substring(nameEQ.length,c.length);}return null;};uid=getCookie(\"uid\");url=\"https://cubioinfo.com/aptitude-test/api/tokens/\"+uid;console.log(something);_context.prev=4;_context.next=7;return fetch(url,{method:\"POST\",headers:{\"Content-Type\":\"application/problem+json; charset=utf-8\"},body:JSON.stringify(something)});case 7:response=_context.sent;if(!response.ok){_context.next=12;break;}_context.next=11;return response.json();case 11:return _context.abrupt(\"return\",_context.sent);case 12:if(!(response.status<=501)){_context.next=15;break;}console.log(response.status);return _context.abrupt(\"return\",response.status);case 15:_context.next=28;break;case 17:_context.prev=17;_context.t0=_context[\"catch\"](4);if(!_context.t0.response){_context.next=23;break;}return _context.abrupt(\"return\",_context.t0.response.status);case 23:if(!_context.t0.request){_context.next=27;break;}return _context.abrupt(\"return\",_context.t0.request);case 27:return _context.abrupt(\"return\",999);case 28:case\"end\":return _context.stop();}}},_callee,null,[[4,17]]);}));return _post.apply(this,arguments);}","map":{"version":3,"sources":["/Users/apple/Documents/GitHub/OCSCE/src/service/postlogin.js"],"names":["post","something","getCookie","name","nameEQ","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","uid","url","console","log","fetch","method","headers","body","JSON","stringify","response","ok","json","status","request"],"mappings":"iTAAA,uBAA8BA,CAAAA,IAA9B,yC,+EAAe,iBAAoBC,SAApB,KACJC,CAAAA,SADI,kIACJA,SADI,qBACMC,IADN,CACY,CACvB,GAAIC,CAAAA,MAAM,CAAGD,IAAI,CAAG,GAApB,CACA,GAAIE,CAAAA,EAAE,CAAGC,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsB,GAAtB,CAAT,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,EAAE,CAACK,MAAvB,CAA+BD,CAAC,EAAhC,CAAoC,CAClC,GAAIE,CAAAA,CAAC,CAAGN,EAAE,CAACI,CAAD,CAAV,CACA,MAAOE,CAAC,CAACC,MAAF,CAAS,CAAT,IAAgB,GAAvB,EAA4BD,CAAC,CAAGA,CAAC,CAACE,SAAF,CAAY,CAAZ,CAAeF,CAAC,CAACD,MAAjB,CAAJ,CAA5B,CACA,GAAIC,CAAC,CAACG,OAAF,CAAUV,MAAV,IAAsB,CAA1B,CAA6B,MAAOO,CAAAA,CAAC,CAACE,SAAF,CAAYT,MAAM,CAACM,MAAnB,CAA2BC,CAAC,CAACD,MAA7B,CAAP,CAC9B,CACD,MAAO,KAAP,CACD,CAVY,CAWPK,GAXO,CAWDb,SAAS,CAAC,KAAD,CAXR,CAYPc,GAZO,CAYD,kDAAoDD,GAZnD,CAabE,OAAO,CAACC,GAAR,CAAYjB,SAAZ,EAba,sCAeYkB,CAAAA,KAAK,CAACH,GAAD,CAAM,CAChCI,MAAM,CAAE,MADwB,CAEhCC,OAAO,CAAE,CACP,eAAgB,yCADT,CAFuB,CAMhCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAevB,SAAf,CAN0B,CAAN,CAfjB,QAeLwB,QAfK,mBAwBPA,QAAQ,CAACC,EAxBF,iDAyBID,CAAAA,QAAQ,CAACE,IAAT,EAzBJ,qEA2BPF,QAAQ,CAACG,MAAT,EAAmB,GA3BZ,2BA4BTX,OAAO,CAACC,GAAR,CAAYO,QAAQ,CAACG,MAArB,EA5BS,gCA6BFH,QAAQ,CAACG,MA7BP,+FAgCP,YAAMH,QAhCC,0DAiCF,YAAMA,QAAN,CAAeG,MAjCb,cAkCA,YAAMC,OAlCN,0DAmCF,YAAMA,OAnCJ,0CAqCF,GArCE,uE","sourcesContent":["export default async function post(something) {\n  function getCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(\";\");\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) === \" \") c = c.substring(1, c.length);\n      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n    }\n    return null;\n  }\n  const uid = getCookie(\"uid\");\n  const url = \"https://cubioinfo.com/aptitude-test/api/tokens/\" + uid;\n  console.log(something);\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/problem+json; charset=utf-8\",\n      },\n\n      body: JSON.stringify(something),\n    });\n\n    if (response.ok) {\n      return await response.json();\n    }\n    if (response.status <= 501) {\n      console.log(response.status);\n      return response.status;\n    }\n  } catch (error) {\n    if (error.response) {\n      return error.response.status;\n    } else if (error.request) {\n      return error.request;\n    } else {\n      return 999;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}